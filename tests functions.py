import project as p

line1 = 'P3           # "P3" means this is a RGB color image in ASCII'
line2 = '3 2          # "3 2" is the width and height of the image in pixels'
line3 = '255          # "255" is the maximum value for each color'
line4 = '# The part above is the header'
line5 = '# The part below is the image data: RGB triplets     255   0   0  # red 0 255   0  # green'
line6 = '255   0   0  # red'
line7 = '  0 255   0  # green'

lines = [line1, line2, line3, line4, line5, line6, line7]

# with open('project/file.txt') as stream:
#     for token in ppm_tokenize(stream):
#         print(token)


M = [[1, 2, 2, 3],
     [1, 1, 2, 1],
     [1, 1, 1, 2]]

M2 = [
    [1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
    [2,  3,  4,  5,  6,  7,  8,  9, 10,  1],
    [3,  4,  5,  6,  7,  8,  9, 10,  1,  2],
    [4,  5,  6,  7,  8,  9, 10,  1,  2,  3],
    [5,  6,  7,  8,  9, 10,  1,  2,  3,  4],
    [6,  7,  8,  9, 10,  1,  2,  3,  4,  5],
    [7,  8,  9, 10,  1,  2,  3,  4,  5,  6],
    [8,  9, 10,  1,  2,  3,  4,  5,  6,  7],
    [9, 10,  1,  2,  3,  4,  5,  6,  7,  8],
]


# print([x for x in block_splitting(10, 9, M2)])
# a = subsampling(4, 3, M, 2, 3)
# print(a)
# print(extrapolate(4, 3, a, 2, 3))

# b = extrapolate(8, 9, M, 2, 3)
# print(subsampling(8, 9, b, 2, 3))


A = [[1, 2, 3],
     [1, 2, 3]]

B = [[1, 2],
     [1, 2],
     [1, 2]]


# print(p.MatMult(A, B))

# v = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(DCT(v))

A = [
    [140,  144,  147,  140,  140,  155,  179,  175],
    [144,  152,  140,  147,  140,  148,  167,  179],
    [152,  155,  136,  167,  163,  162,  152,  172],
    [168,  145,  156,  160,  152,  155,  136,  160],
    [162,  148,  156,  148,  140,  136,  147,  162],
    [147,  167,  140,  155,  155,  140,  136,  162],
    [136,  156,  123,  167,  162,  144,  140,  147],
    [148,  155,  136,  155,  152,  147,  147,  136],
]

# print(p.DCT2(8, 8, A))

LQM = [
    [16, 11, 10, 16,  24,  40,  51,  61],
    [12, 12, 14, 19,  26,  58,  60,  55],
    [14, 13, 16, 24,  40,  57,  69,  56],
    [14, 17, 22, 29,  51,  87,  80,  62],
    [18, 22, 37, 56,  68, 109, 103,  77],
    [24, 35, 55, 64,  81, 104, 113,  92],
    [49, 64, 78, 87, 103, 121, 120, 101],
    [72, 92, 95, 98, 112, 100, 103,  99],
]

CQM = [
    [17, 18, 24, 47, 99, 99, 99, 99],
    [18, 21, 26, 66, 99, 99, 99, 99],
    [24, 26, 56, 99, 99, 99, 99, 99],
    [47, 66, 99, 99, 99, 99, 99, 99],
    [99, 99, 99, 99, 99, 99, 99, 99],
    [99, 99, 99, 99, 99, 99, 99, 99],
    [99, 99, 99, 99, 99, 99, 99, 99],
    [99, 99, 99, 99, 99, 99, 99, 99],
]


def listToGen(l):
    for x in l:
        yield(x)


# l = [0, 0, 4, 0, 0, 0, 7, 1, 0, 2, 0, 0]
# g = listToGen(l)
# print(p.rle0(g))


M8 = [
    [p.ncoeff8(i, j) for i in range(8)]
    for j in range(8)
]


def M8_to_str(M8):
    def for1(s, i):
        return f"{'+' if s >= 0 else '-'}{i:d}"

    return "\n".join(
        " ".join(for1(s, i) for (s, i) in row)
        for row in M8
    )


# print(M8_to_str(M8))

g = [[12, -3, -14, -57, -76, -84, 88, -112],
     [-113, -81, -17, -9, -115, -27, 86, -16],
     [101, 14, -125, -47, 88, 46, 14, -49],
     [-18, 44, -76, -81, 66, -79, 55, 48],
     [7, -106, 107, -65, 65, -88, 22, 57],
     [-30, -93, -105, -12, 20, -88, -9, -77],
     [66, 14, 104, 58, -45, 61, 53, -21],
     [8, -92, -41, -3, -45, 108, 66, 10]]

[12, -3, -113, 101, -81, -14, -57, -17, 14, -18, 7, 44, -125, -9, -76, -84,
 -115, -47, -76, -106, -30, 66, -93, 107, -81, 88, -27, 88, -112, 86, 46, 66,
 -65, -105, 14, 8, -92, 104, -12, 65, -79, 14, -16, -49, 55, -88, 20, 58,
 -41, -3, -45, -88, 22, 48, 57, -9, 61, -45, 108, 53, -77, -21, 66, 10]
